#include <time.h>
#include <err.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>

int main(int argc, char* argv[]){

        if(argc < 3){
                errx(1, "incorrect arg");
        }

        int fd=open("run.log", O_CREAT, O_TRUNC, O_WRONLY, 0644);
        int time_limit = argv[1][0] - '0';

        while(1){
                int pf[2];

                if(pipe(pf) == -1){
                        close(fd);
                        err(2, "Error in pipe");
                }

                int finish_time;
                int exit_status;
                pid_t pid = fork();

                if(pid == -1){
                        close(fd);
                        err(3,"Error fork");
                }

                if(pid == 0){
                        int start_time = time(NULL);
                        close(pf[0]);
                        if (write(pf[1], &start_time, sizeof(start_time)) != sizeof(start_time)){
                                close(fd);
                                err(4, "Error");
                        }

                        //shte izpylni argv[2] i shte podade ostanalite argumenti na izpylnimiya fail
                        if(execvp(argv[2], argv+2) == -1){
                                close(fd);
                                err(5, "Error");
                        }
                }

                close(pf[1]);
                int status;
                wait(&status);
                finish_time = time(NULL);
                exit_status = WEXITSTATUS(status);

                int start;
                if(read(pf[0],&start,sizeof(start)) != sizeof(start)){
                        err(6, "Error");
                }

                //dprintf(1, "%d %d %d\n", start, finish_time, exit_status);
                write(fd, &start, sizeof(start));
                write(fd, " ", 1);
                write(fd, &finish_time, sizeof(finish_time));
                write(fd, " ", 1);
                write(fd, &exit_status, sizeof(exit_status));
                write(fd, "\n",1);

                if(exit_status == 0 && finish_time - start >= time_limit){
                        exit(0);
                }

                close(pf[0]);
        }

        exit(0);
}
